import React, { useMemo } from 'react';
import {
  Image,
  View,
  ScrollView,
  StyleSheet,
  ActivityIndicator
} from 'react-native';
import CWText from '../../components/CWText';
import PortfolioPieChart from './PortfolioPieChart';
import tickerLogos from '../../assets/tickerLogos';
import PortfolioList from './PortfolioList';
import useAxiosGet from '../../hooks/useAxiosGet';
import { CUSTOMER_API_URL, PRICE_HISTORY_API_URL } from '../../apiConfig';
import convertToRupiah from '../../utils/convertToRupiah';
import EncryptedStorage from 'react-native-encrypted-storage';

const PortfolioScreen = ({ navigation }) => {
  const todayDate = new Date();
  todayDate.setHours(0, 0, 0, 0);

  const {
    data: portfoliosResponse,
    isLoading: isLoadingPortfolios,
    error: errorPortfolio
  } = useAxiosGet(
    `${CUSTOMER_API_URL}/6548e650b1c6cd04394bdf6c/portfolio-histories?dateFrom=${todayDate.toISOString()}`,
    navigation
  );

  (async () => {
    if (errorPortfolio) {
      await EncryptedStorage.removeItem('token');
      navigation.replace('Login');
    }
  })();
  const {
    data: priceHistoriesResponse,
    isLoading: isLoadingPriceHistories,
    error: errorPriceHistories
  } = useAxiosGet(
    `${PRICE_HISTORY_API_URL}?dateFrom=${todayDate.toISOString()}`
  );

  const tickers = useMemo(() => {
    return portfoliosResponse?.portfolios[0]?.tickers.filter(
      (ticker) => ticker.ticker !== 'IDR'
    );
  }, [portfoliosResponse?.portfolios]);

  const priceHistories = useMemo(() => {
    return priceHistoriesResponse?.priceHistories;
  }, [priceHistoriesResponse?.priceHistories]);

  const rupiahTicker = useMemo(() => {
    const RUPIAH = 'IDR';
    const rupiah = portfoliosResponse?.portfolios[0]?.tickers.find(
      (ticker) => ticker.ticker === RUPIAH
    );
    return {
      ticker: { ticker: rupiah?.ticker, name: 'Indonesian Rupiah' },
      amount: rupiah?.amount,
      price: 1
    };
  }, [portfoliosResponse?.portfolios]);

  const portfolios = useMemo(() => {
    return tickers?.map((ticker) => ({
      ticker: {
        ticker: ticker.ticker,
        name: priceHistories?.find(
          (priceHistory) => priceHistory.ticker.ticker === ticker.ticker
        )?.ticker.name
      },
      amount: ticker.amount,
      price: priceHistories?.find(
        (priceHistory) => priceHistory.ticker.ticker === ticker.ticker
      )?.price
    }));
  }, [priceHistories, tickers]);

  const totalAssets = useMemo(() => {
    if (portfolios && rupiahTicker) {
      return [...portfolios, rupiahTicker].reduce(
        (previousValue, currentValue) =>
          previousValue + currentValue.price * currentValue.amount,
        0
      );
    }
    return 0;
  }, [portfolios, rupiahTicker]);

  if (isLoadingPortfolios || isLoadingPriceHistories) {
    return (
      <View className="flex-1 items-center justify-center">
        <ActivityIndicator
          accessibilityLabel="portfolio loader"
          size="large"
          color="#0300A2"
        />
      </View>
    );
  }

  if (errorPortfolio || errorPriceHistories) {
    return (
      <View
        accessibilityLabel="fetch portfolio error"
        className="flex-1 items-center justify-center">
        <CWText className="text-xl text-cw-blue" fontWeight={700}>
          Something went wrong
        </CWText>
        <CWText className="text-base text-cw-blue" fontWeight={300}>
          An unknown network error occurred
        </CWText>
      </View>
    );
  }

  if (portfoliosResponse?.portfolios.length === 0) {
    return (
      <View className="flex-1 items-center justify-center">
        <CWText className="text-xl text-cw-blue" fontWeight={700}>
          No Portfolio Data
        </CWText>
      </View>
    );
  }

  return (
    <ScrollView
      className="bg-cw-lightgrey px-5"
      contentContainerStyle={styles.container}
      showsVerticalScrollIndicator={false}>
      <View
        accessibilityLabel="portfolio pie chart"
        className="mt-[-20] items-center">
        {portfolios && (
          <PortfolioPieChart portfolios={[...portfolios, rupiahTicker]} />
        )}
      </View>
      <View className="mt-[-20]">
        <CWText className="text-xl mb-3" fontWeight={700}>
          My Portfolio
        </CWText>
        <CWText
          className="text-lg mb-3"
          fontWeight={700}>{`Total Assets: ${convertToRupiah(
          totalAssets
        )}`}</CWText>
        <View className="flex-row py-2 px-3 mb-2 h-16 bg-white items-center rounded-xl">
          <View className="flex-row p-2 items-center border-[1px] border-cw-grey rounded-full mr-5">
            <Image source={tickerLogos.IDR} className="w-5 h-5" />
          </View>
          <View accessibilityLabel="rupiah balance" className="flex-1">
            <CWText className="text-xs text-cw-purple" fontWeight={600}>
              {rupiahTicker.ticker.name}
            </CWText>
            <CWText className="text-lg" fontWeight={800}>
              {rupiahTicker.amount && convertToRupiah(rupiahTicker.amount)}
            </CWText>
          </View>
        </View>
        <PortfolioList portfolios={portfolios} />
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1
  }
});

export default PortfolioScreen;
