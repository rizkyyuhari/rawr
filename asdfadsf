import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import _renderInput from './_renderInput'; // Adjust the import path accordingly

describe('_renderInput component', () => {
  it('should set error state on onBlur when value is empty', () => {
    const props = {
      value: '',
      label: 'Test Label',
      required: true,
      placeholder: 'Test Placeholder',
      onChange: jest.fn(),
      maxLength: 10,
      disabled: false,
    };

    const { getByPlaceholderText, getByText } = render(<_renderInput {...props} />);

    const inputElement = getByPlaceholderText('Test Placeholder');

    fireEvent.blur(inputElement);

    expect(getByText('Test Label*')).toBeInTheDocument(); // Check if the required indicator is shown
  });

  it('should not set error state on onBlur when value is not empty', () => {
    const props = {
      value: 'non-empty-value',
      label: 'Test Label',
      required: true,
      placeholder: 'Test Placeholder',
      onChange: jest.fn(),
      maxLength: 10,
      disabled: false,
    };

    const { queryByText, getByPlaceholderText } = render(<_renderInput {...props} />);

    const inputElement = getByPlaceholderText('Test Placeholder');

    fireEvent.blur(inputElement);

    expect(queryByText('Test Label*')).toBeNull(); // Check that the required indicator is not shown
  });

  // Add more test cases as needed
});
