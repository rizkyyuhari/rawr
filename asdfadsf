import React, { useCallback, useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Pressable,
  ScrollView,
  View,
  RefreshControl
} from 'react-native';
import CWText from '../../components/CWText';
import DashboardLineChart from './DashboardLineChart';
import DashboardProfile from './DashboardProfile';
import EncryptedStorage from 'react-native-encrypted-storage';
import PropTypes from 'prop-types';

import DashboardProfitDetailScreen from './DashboardProfitDetailScreen';
import {
  priceHistoriesURL,
  transactionsURL,
  portfoliosURL,
  customerURL
} from '../../config/config';
import axios from 'axios';

const DashboardScreen = ({ navigation }) => {
  const [refreshing, setRefreshing] = React.useState(false);

  const onRefresh = React.useCallback(async () => {
    setRefreshing(true);

    await fetchData();
    setRefreshing(false);
  }, [fetchData]);

  const [pointDetail, setPointDetail] = useState();
  const [chartData, setChartData] = useState({
    graphData: [],
    baseData: [],
    customer: {},
    balance: 0
  });
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setIsError] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const getEndDate = () => {
    const endDate = new Date();
    return endDate;
  };

  const getStartDate = () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 6);
    return startDate;
  };

  const getCustomerBalance = (data) => {
    const IDR = 'IDR';
    const rupiahTicker = data.tickers.find((ticker) => ticker.ticker === IDR);
    return rupiahTicker?.amount;
  };

  const getTodayPortfolio = (portfolios) => {
    return portfolios.find((portfolio) => {
      return (
        new Date(portfolio.date).toLocaleDateString() ===
        new Date().toLocaleDateString()
      );
    });
  };

  const fetchData = useCallback(async () => {
    const token = await EncryptedStorage.getItem('token');
    const headers = {
      Authorization: `Bearer ${token}`
    };

    try {
      setIsLoading(true);
      setIsError(false);
      const startDate = getStartDate();
      const endDate = getEndDate();
      const { data: customer } = await axios.get(customerURL, { headers });
      const { data: portfolios } = await axios.get(
        `${portfoliosURL}?dateFrom=${startDate.toLocaleDateString()}&dateTo=${endDate.toLocaleDateString()}`,
        { headers }
      );
      const { data: priceHistories } = await axios.get(
        `${priceHistoriesURL}?dateFrom=${startDate.toLocaleDateString()}&dateTo=${endDate.toLocaleDateString()}`,
        { headers }
      );
      const { data: transactions } = await axios.get(transactionsURL, {
        headers
      });
      console.log(customer);
      console.log(transactions);

      const apiData = {
        portfolios: portfolios.portfolios,
        priceHistories: priceHistories.priceHistories,
        transactions: transactions.transactions
      };
      const graphData = getGraphData(apiData);
      const baseData = getBaseData(graphData);
      const customerBalance = getCustomerBalance(
        getTodayPortfolio(apiData.portfolios)
      );
      setChartData((data) => ({
        ...data,
        graphData: graphData,
        baseData: baseData,
        customer,
        balance: customerBalance
      }));
    } catch (error) {
      setErrorMessage('Oops, something wrong!');
      setIsError(true);
    } finally {
      setIsLoading(false);
    }
  }, [getBaseData, getGraphData]);

  useEffect(() => {
    fetchData();
  }, [fetchData, onRefresh]);

  const getGraphBalance = (portfolio, priceHistories, portfolioDate) => {
    return portfolio.tickers
      .map((ticker) => {
        const price = priceHistories.find((priceHistory) => {
          const priceDate = new Date(priceHistory.date).toLocaleDateString();
          return (
            portfolioDate === priceDate &&
            priceHistory.ticker.ticker === ticker.ticker
          );
        });
        return price?.price ? ticker.amount * price?.price : ticker.amount;
      })
      .reduce((total, tickerPrice) => total + tickerPrice, 0);
  };

  const getDate = (portfolio) => {
    return new Date(portfolio.date).toLocaleDateString('id-ID', {
      day: '2-digit',
      month: 'short',
      year: 'numeric'
    });
  };

  const getTransactions = (transactions, portfolioDate) => {
    return transactions.filter((transaction) => {
      const transactionDate = new Date(transaction.date).toLocaleDateString();
      return transactionDate === portfolioDate;
    });
  };

  const getGraphData = useCallback((data) => {
    const { priceHistories, portfolios, transactions } = data;
    return portfolios.map((portfolio) => {
      const portfolioDate = new Date(portfolio.date).toLocaleDateString();
      return {
        balance: getGraphBalance(portfolio, priceHistories, portfolioDate),
        date: getDate(portfolio),
        transactions: getTransactions(transactions, portfolioDate)
      };
    });
  }, []);

  const getBaseData = useCallback((data) => {
    const newBaseData = [];

    data.map((item, index) => {
      newBaseData.push({
        ...item,
        balance: data[0].balance,
        date: data[index].date
      });
    });

    return newBaseData;
  }, []);

  const handleProfitDetailClick = (dataPoint) => {
    dataPoint.map((point) => {
      setPointDetail({
        ...pointDetail,
        balance: point.balance,
        date: point.date,
        transactions: point.transactions,
        x: point._x,
        y: point._y
      });
    });
  };

  if (isLoading) {
    return (
      <View className="flex-1 justify-center items-center bg-cw-lightpurple">
        <ActivityIndicator
          accessibilityLabel="loader-activity"
          size="large"
          color="blue"
        />
      </View>
    );
  }

  // if (errorMessage && isError) {
  //   return (
  //     <View className="flex-1 justify-center items-center bg-cw-lightpurple">
  //       <CWText className="text-2xl text-center">{errorMessage}</CWText>
  //     </View>
  //   );
  // }

  const handleLogout = async () => {
    await EncryptedStorage.removeItem('token');
    navigation.replace('Login');
  };

  return (
    <ScrollView
      className="flex-1 min-w-full bg-cw-lightgrey"
      refreshControl={
        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
      }>
      {errorMessage && isError ? (
        <View className="flex-1 justify-center items-center bg-cw-lightpurple">
          <CWText className="text-2xl text-center">{errorMessage}</CWText>
        </View>
      ) : (
        <View className="flex-1 h-full" accessibilityLabel="Dashboard">
          {chartData.graphData.length > 0 && (
            <View>
              <View className="px-6 justify-center flex-col">
                <DashboardProfile
                  customerData={chartData.customer}
                  balance={chartData.balance}
                />
              </View>
              <View accessibilityLabel="profit loss line chart">
                <DashboardLineChart
                  data={chartData.graphData}
                  baseData={chartData.baseData}
                  handleProfitDetailClick={handleProfitDetailClick}
                />
              </View>
              {pointDetail ? (
                <DashboardProfitDetailScreen pointDetail={pointDetail} />
              ) : null}
            </View>
          )}
          <Pressable
            accessibilityLabel="logout-button"
            className="items-center"
            onPress={handleLogout}>
            <CWText className=" p-2 text-white bg-cw-purple">Logout</CWText>
          </Pressable>
        </View>
      )}
    </ScrollView>
  );
};

DashboardScreen.propTypes = {
  navigation: PropTypes.shape({
    replace: PropTypes.func.isRequired
  })
};

export default DashboardScreen;


import React from 'react';
import axios from 'axios';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { fireEvent, render, screen } from '@testing-library/react-native';
import { when } from 'jest-when';
import AuthenticatedNavigator from '../../src/navigator/AuthenticatedNavigator';
import { portfoliosResponse } from '../fixturesFolder/portfolio';
import { transactionsResponse } from '../fixturesFolder/transactions';
import priceHistoriesResponse from '../fixturesFolder/priceHistory';
import {
  customerURL,
  portfoliosURL,
  priceHistoriesURL,
  transactionsURL
} from '../../src/config/config';
import {} from 'victory-native';
import customerData from '../fixturesFolder/customerData';
import EncryptedStorage from 'react-native-encrypted-storage';

jest.mock('react-native-encrypted-storage', () => ({
  getItem: jest.fn(),
  removeItem: jest.fn()
}));

jest.mock('axios');
jest.mock('victory-native', () => {
  const originalModule = jest.requireActual('victory-native');

  return {
    ...originalModule,
    VictoryVoronoiContainer: jest.fn(),
    VictoryLabel: jest.fn(),
    VictoryTheme: jest.fn(),
    VictoryPie: jest.fn(),
    VictoryTooltip: jest.fn()
  };
});
describe('AuthenticatedNavigator', () => {
  beforeEach(() => {
    jest.useFakeTimers();
    jest.advanceTimersByTime(1);
  });
  afterEach(() => {
    jest.resetAllMocks();
    jest.useRealTimers();
  });
  it('should render Dashboard screen by default', async () => {
    const token = 'token';
    EncryptedStorage.getItem.mockResolvedValue(token);
    const headers = {
      Authorization: `Bearer ${token}`
    };
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 6);
    when(axios.get)
      .calledWith(customerURL, { headers })
      .mockResolvedValue({ data: customerData })
      .calledWith(
        `${portfoliosURL}?dateFrom=${startDate.toLocaleDateString()}&dateTo=${endDate.toLocaleDateString()}`,
        { headers }
      )
      .mockResolvedValue({ data: portfoliosResponse })
      .calledWith(
        `${priceHistoriesURL}?dateFrom=${startDate.toLocaleDateString()}&dateTo=${endDate.toLocaleDateString()}`,
        { headers }
      )
      .mockResolvedValue({ data: priceHistoriesResponse })
      .calledWith(transactionsURL, { headers })
      .mockResolvedValue({ data: transactionsResponse });

    render(
      <NavigationContainer>
        <AuthenticatedNavigator />
      </NavigationContainer>
    );

    expect(await screen.findByLabelText('loader-activity'));

    expect(EncryptedStorage.getItem).toHaveBeenNthCalledWith(1, 'token');
  });

  it('should render Dashboard screen by default', async () => {
    const token = 'token';
    EncryptedStorage.getItem.mockResolvedValue(token);
    const headers = {
      Authorization: `Bearer ${token}`
    };
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 6);
    when(axios.get)
      .calledWith(customerURL, { headers })
      .mockResolvedValue({ data: customerData })
      .calledWith(
        `${portfoliosURL}?dateFrom=${startDate.toLocaleDateString()}&dateTo=${endDate.toLocaleDateString()}`,
        { headers }
      )
      .mockResolvedValue({ data: portfoliosResponse })
      .calledWith(
        `${priceHistoriesURL}?dateFrom=${startDate.toLocaleDateString()}&dateTo=${endDate.toLocaleDateString()}`,
        { headers }
      )
      .mockResolvedValue({ data: priceHistoriesResponse })
      .calledWith(transactionsURL, { headers })
      .mockResolvedValue({ data: transactionsResponse });

    render(
      <NavigationContainer>
        <AuthenticatedNavigator />
      </NavigationContainer>
    );

    const buttonLogout = await screen.findByLabelText('logout-button');

    fireEvent.press(buttonLogout);

    expect(EncryptedStorage.getItem).toHaveBeenNthCalledWith(1, 'token');
  });
});

apa yang salah dalam testing nya saat     fireEvent.press(buttonLogout);, keluar navigation.replace is not a function
