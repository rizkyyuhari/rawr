// @flow

// $FlowFixMe

import React from 'React';

import { render, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

import { InputTextType } from './Constants';
import TextInput, { _inputBorderColor } from './TextInput.component';


const props = {
  value: '',
  label: 'Username',
  required: true,
  placeholder: 'Type your username',
  onChange: jest.fn((event: SyntheticInputEvent<HTMLInputElement>) => { console.log(event); }),
  maxLength: 30,
  disabled: false,
};

describe('TextInput Component', () => {
  it('should return border-tp-red if value of input i empty ', () => {
    const result = _inputBorderColor(true);

    expect(result).toBe('border-tp-red hover:border-tp-red');
  });

  it('should show Username Cannot be Empty if input value empty', () => {
    const { getByPlaceholderText, getByText } = render(<TextInput {...props} />);

    const inputElement = getByPlaceholderText(props.placeholder);

    fireEvent.blur(inputElement);

    expect(getByText('Username Cannot be Empty')).toBeDefined();
    expect(getByText('*')).toBeDefined();
  });

  it('should not show error Usernam Cannot be Empty if input value filled', () => {
    const { getByPlaceholderText, queryByText } = render(<TextInput {...props} value="raihan" />);

    const inputElement = getByPlaceholderText(props.placeholder);

    fireEvent.blur(inputElement);

    expect(queryByText('Username Cannot be Empty')).toBeNull();
  });

  it('should change input type to password if user clicked icon invisible on the input', async () => {
    const { getByTestId } = render(
      <TextInput {...props} value="raihan" type="password" />
    );
    const eyeIcon = getByTestId('icon-eye');

    userEvent.click(eyeIcon);
    const input = getByTestId('text-input');

    expect(input.type).toBe(InputTextType.PASSWORD);
  });
});
